{"version":3,"sources":["../src/index.js"],"names":["RouterBuilder","RoutesTranslations","alpLimosa","routerBuilder","controllers","app","config","routeTranslationsConfig","get","routeTranslations","builder","router","context","urlGenerator","routeKey","params","language","redirectTo","to","redirect","registerBrowserContextTransformer","initialBrowserContext","ctx","route","callAction","controllerName","actionName","controller","status","Error","action","Promise","resolve","call","err","reject","find","path"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,QAAkD,QAAlD;;AAEA,SAASD,aAAT,QAA8B,QAA9B;;AAgBA,eAAe,SAASE,SAAT,CACbC,aADa,EAEbC,WAFa,EAGD;AACZ,SAAQC,GAAD,IAAkB;AACvB,UAAMC,SAASD,IAAIC,MAAnB;AACA,UAAMC,0BAAuDD,OAAOE,GAAP,CAAW,mBAAX,CAA7D;AACA,UAAMC,oBAAoB,IAAIR,kBAAJ,CAAuBM,uBAAvB,CAA1B;AACA,UAAMG,UAAU,IAAIV,aAAJ,CAAkBS,iBAAlB,EAAqCH,OAAOE,GAAP,CAAW,oBAAX,CAArC,CAAhB;AACAL,kBAAcO,OAAd;AACA,UAAMC,SAASD,QAAQC,MAAvB;;AAEAN,QAAIM,MAAJ,GAAaA,MAAb;;AAEAN,QAAIO,OAAJ,CAAYC,YAAZ,GAA2B,UACzBC,QADyB,EAEzBC,MAFyB,EAGjB;AACR,aAAOJ,OAAOE,YAAP,CAAoB,KAAKG,QAAzB,EAAmCF,QAAnC,EAA6CC,MAA7C,CAAP;AACD,KALD;;AAOAV,QAAIO,OAAJ,CAAYK,UAAZ,GAAyB,UAAUC,EAAV,EAAsBH,MAAtB,EAA4D;AACnF,aAAO,KAAKI,QAAL,CAAcR,OAAOE,YAAP,CAAoB,KAAKG,QAAzB,EAAmCE,EAAnC,EAAuCH,MAAvC,CAAd,CAAP;AACD,KAFD;;AAIAV,QAAID,WAAJ,GAAkBA,WAAlB;;AAGEC,QAAIe,iCAAJ,CAAsC,CAACC,qBAAD,EAAwBC,GAAxB,KACpCD,sBAAsBE,KAAtB,GAA8BD,IAAIC,KADpC;;AAKF;;;;;;AAMAlB,QAAIO,OAAJ,CAAYY,UAAZ,GAAyB,UAAUC,cAAV,EAAkCC,UAAlC,EAAsE;AAC7F,YAAMH,QAAQ,KAAKA,KAAnB;;AAEA,UAAI,CAACG,UAAL,EAAiB;AACfA,qBAAaD,cAAb;AACAA,yBAAiBF,MAAMI,UAAvB;AACD;;AAED,YAAMA,aAAavB,YAAYI,GAAZ,CAAgBiB,cAAhB,CAAnB;AACA,UAAI,CAACE,UAAL,EAAiB;AACf,aAAKC,MAAL,GAAc,GAAd;AACA,cAAM,IAAIC,KAAJ,CAAW,yBAAwBJ,cAAe,EAAlD,CAAN;AACD;;AAED,YAAMK,SAASH,WAAWD,UAAX,CAAf;AACA,UAAI,CAACI,MAAL,CAAW,wBAAX,EAAqC;AACnC,eAAKF,MAAL,GAAc,GAAd;AACA,gBAAM,IAAIC,KAAJ,CAAW,qBAAoBN,MAAMI,UAAW,IAAGJ,MAAMO,MAAO,EAAhE,CAAN;AACD;;AAED,UAAI;AACF,eAAOC,QAAQC,OAAR,CAAgBL,WAAWD,UAAX,EAAuBO,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,CAAhB,CAAP;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAOH,QAAQI,MAAR,CAAeD,GAAf,CAAP;AACD;AACF,KAzBD;;AA2BA,WAAQZ,GAAD,IAAiB;AACtB,UAAIC,QAAQZ,OAAOyB,IAAP,CAAYd,IAAIe,IAAhB,EAAsBf,IAAIN,QAA1B,CAAZ;;AAEA,UAAI,CAACO,KAAL,EAAY;AACVD,YAAIM,MAAJ,GAAa,GAAb;AACA,cAAM,IAAIC,KAAJ,CAAW,oBAAmBP,IAAIe,IAAK,EAAvC,CAAN;AACD;;AAEDf,UAAIC,KAAJ,GAAYA,KAAZ;;AAEA,aAAOD,IAAIE,UAAJ,CAAeD,MAAMI,UAArB,EAAiCJ,MAAMO,MAAvC,CAAP;AACD,KAXD;AAYD,GA1ED;AA2ED","file":"index.js","sourcesContent":["import { RouterBuilder, RoutesTranslations } from 'limosa';\n\nexport { RouterBuilder } from 'limosa';\n\ntype AppType = any;\ntype ActionType = (ctx: Object) => void | Promise<void>;\ntype ControllerType = { [string]: ActionType };\ntype ControllersType = Map<string, ControllerType>;\ntype RouterBuilderType = (builder: RouterBuilder) => void;\ntype ReturnType = (app: AppType) => (ctx: Object) => Promise<void>;\ntype RouteTranslationsConfigType = Map<string, Map<string, string>>;\ntype UrlGeneratorParamsType = {\n  extension: ?string,\n  queryString: ?string,\n  hash: ?string,\n  [string]: string | number,\n};\n\nexport default function alpLimosa(\n  routerBuilder: RouterBuilderType,\n  controllers: ControllersType\n): ReturnType {\n  return (app: AppType) => {\n    const config = app.config;\n    const routeTranslationsConfig: RouteTranslationsConfigType = config.get('routeTranslations');\n    const routeTranslations = new RoutesTranslations(routeTranslationsConfig);\n    const builder = new RouterBuilder(routeTranslations, config.get('availableLanguages'));\n    routerBuilder(builder);\n    const router = builder.router;\n\n    app.router = router;\n\n    app.context.urlGenerator = function (\n      routeKey: string,\n      params: ?UrlGeneratorParamsType,\n    ): string {\n      return router.urlGenerator(this.language, routeKey, params);\n    };\n\n    app.context.redirectTo = function (to: string, params: ?UrlGeneratorParamsType): any {\n      return this.redirect(router.urlGenerator(this.language, to, params));\n    };\n\n    app.controllers = controllers;\n\n    if (!BROWSER) {\n      app.registerBrowserContextTransformer((initialBrowserContext, ctx) => (\n        initialBrowserContext.route = ctx.route\n      ));\n    }\n\n    /**\n     *\n     * @param {string} controllerName\n     * @param {string} [actionName]\n     * @returns {*}\n     */\n    app.context.callAction = function (controllerName: string, actionName: ?string): Promise<void> {\n      const route = this.route;\n\n      if (!actionName) {\n        actionName = controllerName;\n        controllerName = route.controller;\n      }\n\n      const controller = controllers.get(controllerName);\n      if (!controller) {\n        this.status = 404;\n        throw new Error(`Controller not found: ${controllerName}`);\n      }\n\n      const action = controller[actionName];\n      if (!action/* || !action.isAction*/) {\n        this.status = 404;\n        throw new Error(`Action not found: ${route.controller}.${route.action}`);\n      }\n\n      try {\n        return Promise.resolve(controller[actionName].call(null, this));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    };\n\n    return (ctx: Object) => {\n      let route = router.find(ctx.path, ctx.language);\n\n      if (!route) {\n        ctx.status = 404;\n        throw new Error(`Route not found: ${ctx.path}`);\n      }\n\n      ctx.route = route;\n\n      return ctx.callAction(route.controller, route.action);\n    };\n  };\n}\n"]}