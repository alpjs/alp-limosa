{"version":3,"sources":["../src/index.js"],"names":["RouterBuilder","RoutesTranslations","alpLimosa","routerBuilder","controllers","app","config","routeTranslationsConfig","get","routeTranslations","builder","router","context","urlGenerator","language","arguments","redirectTo","to","params","redirect","callAction","controllerName","actionName","route","controller","status","Error","action","Promise","resolve","call","err","reject","ctx","find","path"],"mappings":"AAAA;;AAEA,SAASA,aAAT,EAAwBC,kBAAxB,QAAkD,QAAlD;;AAEA,SAASD,aAAT,QAA8B,QAA9B;;AAEA,eAAe,SAASE,SAAT,CAAmBC,aAAnB,EAA4CC,WAA5C,EAA8D;AAC3E,SAAO,UAACC,GAAD,EAAS;AACd,UAAMC,SAASD,IAAIC,MAAnB;AACA,UAAMC,0BAA+BD,OAAOE,GAAP,CAAW,mBAAX,CAArC;AACA,UAAMC,oBAAoB,IAAIR,kBAAJ,CAAuBM,uBAAvB,CAA1B;AACA,UAAMG,UAAU,IAAIV,aAAJ,CAAkBS,iBAAlB,EAAqCH,OAAOE,GAAP,CAAW,oBAAX,CAArC,CAAhB;AACAL,kBAAcO,OAAd;AACA,UAAMC,SAASD,QAAQC,MAAvB;;AAEAN,QAAIM,MAAJ,GAAaA,MAAb;;AAEAN,QAAIO,OAAJ,CAAYC,YAAZ,GAA2B,YAAY;AACrC;AACA,aAAOF,OAAOE,YAAP,CAAoB,KAAKC,QAAzB,EAAmC,GAAGC,SAAtC,CAAP;AACD,KAHD;;AAKAV,QAAIO,OAAJ,CAAYI,UAAZ,GAAyB,UAAUC,EAAV,EAAsBC,MAAtB,EAAuC;AAC9D;AACA,aAAO,KAAKC,QAAL,CAAcR,OAAOE,YAAP,CAAoB,KAAKC,QAAzB,EAAmCG,EAAnC,EAAuCC,MAAvC,CAAd,CAAP;AACD,KAHD;;AAKAb,QAAID,WAAJ,GAAkBA,WAAlB;;AAQA;;;;;;AAMAC,QAAIO,OAAJ,CAAYQ,UAAZ,GAAyB,UAAUC,cAAV,EAAkCC,UAAlC,EAAuD;AAC9E,YAAMC,QAAQ,KAAKA,KAAnB;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACfA,qBAAaD,cAAb;AACAA,yBAAiBE,MAAMC,UAAvB;AACD;;AAED,YAAMA,aAAapB,YAAYI,GAAZ,CAAgBa,cAAhB,CAAnB;AACA,UAAI,CAACG,UAAL,EAAiB;AACf,aAAKC,MAAL,GAAc,GAAd;AACA,cAAM,IAAIC,KAAJ,CAAW,yBAAwBL,cAAe,EAAlD,CAAN;AACD;;AAED,YAAMM,SAASH,WAAWF,UAAX,CAAf;AACA,UAAI,CAACK,MAAL,CAAW,wBAAX,EAAqC;AACnC,eAAKF,MAAL,GAAc,GAAd;AACA,gBAAM,IAAIC,KAAJ,CAAW,qBAAoBH,MAAMC,UAAW,IAAGD,MAAMI,MAAO,EAAhE,CAAN;AACD;;AAED,UAAI;AACF,eAAOC,QAAQC,OAAR,CAAgBL,WAAWF,UAAX,EAAuBQ,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,CAAhB,CAAP;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAOH,QAAQI,MAAR,CAAeD,GAAf,CAAP;AACD;AACF,KAzBD;;AA2BA,WAAO,UAACE,GAAD,EAAS;AACd,UAAIV,QAAQZ,OAAOuB,IAAP,CAAYD,IAAIE,IAAhB,EAAsBF,IAAInB,QAA1B,CAAZ;;AAEA,UAAI,CAACS,KAAL,EAAY;AACVU,YAAIR,MAAJ,GAAa,GAAb;AACA,cAAM,IAAIC,KAAJ,CAAW,oBAAmBO,IAAIE,IAAK,EAAvC,CAAN;AACD;;AAEDF,UAAIV,KAAJ,GAAYA,KAAZ;;AAEA,aAAOU,IAAIb,UAAJ,CAAeG,MAAMC,UAArB,EAAiCD,MAAMI,MAAvC,CAAP;AACD,KAXD;AAYD,GAzED;AA0ED","file":"index.js","sourcesContent":["/* global BROWSER */\n\nimport { RouterBuilder, RoutesTranslations } from 'limosa';\n\nexport { RouterBuilder } from 'limosa';\n\nexport default function alpLimosa(routerBuilder: Function, controllers: Map) {\n  return (app) => {\n    const config = app.config;\n    const routeTranslationsConfig: Map = config.get('routeTranslations');\n    const routeTranslations = new RoutesTranslations(routeTranslationsConfig);\n    const builder = new RouterBuilder(routeTranslations, config.get('availableLanguages'));\n    routerBuilder(builder);\n    const router = builder.router;\n\n    app.router = router;\n\n    app.context.urlGenerator = function () {\n      // eslint-disable-next-line prefer-rest-params\n      return router.urlGenerator(this.language, ...arguments);\n    };\n\n    app.context.redirectTo = function (to: string, params: ?Object) {\n      // eslint-disable-next-line prefer-rest-params\n      return this.redirect(router.urlGenerator(this.language, to, params));\n    };\n\n    app.controllers = controllers;\n\n    if (!BROWSER) {\n      app.registerBrowserContextTransformer((initialBrowserContext, ctx) => (\n        initialBrowserContext.route = ctx.route\n      ));\n    }\n\n    /**\n     *\n     * @param {string} controllerName\n     * @param {string} [actionName]\n     * @returns {*}\n     */\n    app.context.callAction = function (controllerName: string, actionName: ?string) {\n      const route = this.route;\n\n      if (!actionName) {\n        actionName = controllerName;\n        controllerName = route.controller;\n      }\n\n      const controller = controllers.get(controllerName);\n      if (!controller) {\n        this.status = 404;\n        throw new Error(`Controller not found: ${controllerName}`);\n      }\n\n      const action = controller[actionName];\n      if (!action/* || !action.isAction*/) {\n        this.status = 404;\n        throw new Error(`Action not found: ${route.controller}.${route.action}`);\n      }\n\n      try {\n        return Promise.resolve(controller[actionName].call(null, this));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    };\n\n    return (ctx) => {\n      let route = router.find(ctx.path, ctx.language);\n\n      if (!route) {\n        ctx.status = 404;\n        throw new Error(`Route not found: ${ctx.path}`);\n      }\n\n      ctx.route = route;\n\n      return ctx.callAction(route.controller, route.action);\n    };\n  };\n}\n"]}