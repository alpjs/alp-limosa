{"version":3,"sources":["../src/index.js"],"names":["RouterBuilder","RoutesTranslations","alpLimosa","routerBuilder","controllers","app","config","routeTranslationsConfig","get","routeTranslations","builder","router","context","urlGenerator","args","language","redirectTo","to","params","redirect","callAction","controllerName","actionName","route","controller","status","Error","action","Promise","resolve","call","err","reject","ctx","find","path"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,QAAkD,QAAlD;;AAEA,SAASD,aAAT,QAA8B,QAA9B;;AAUA,eAAe,SAASE,SAAT,CACbC,aADa,EAEbC,WAFa,EAGD;AACZ,SAAO,UAACC,GAAD,EAAkB;AACvB,UAAMC,SAASD,IAAIC,MAAnB;AACA,UAAMC,0BAAuDD,OAAOE,GAAP,CAAW,mBAAX,CAA7D;AACA,UAAMC,oBAAoB,IAAIR,kBAAJ,CAAuBM,uBAAvB,CAA1B;AACA,UAAMG,UAAU,IAAIV,aAAJ,CAAkBS,iBAAlB,EAAqCH,OAAOE,GAAP,CAAW,oBAAX,CAArC,CAAhB;AACAL,kBAAcO,OAAd;AACA,UAAMC,SAASD,QAAQC,MAAvB;;AAEAN,QAAIM,MAAJ,GAAaA,MAAb;;AAEAN,QAAIO,OAAJ,CAAYC,YAAZ,GAA2B,UAAU,GAAGC,IAAb,EAAmD;AAC5E,aAAOH,OAAOE,YAAP,CAAoB,KAAKE,QAAzB,EAAmC,GAAGD,IAAtC,CAAP;AACD,KAFD;;AAIAT,QAAIO,OAAJ,CAAYI,UAAZ,GAAyB,UAAUC,EAAV,EAAsBC,MAAtB,EAAmE;AAC1F,aAAO,KAAKC,QAAL,CAAcR,OAAOE,YAAP,CAAoB,KAAKE,QAAzB,EAAmCE,EAAnC,EAAuCC,MAAvC,CAAd,CAAP;AACD,KAFD;;AAIAb,QAAID,WAAJ,GAAkBA,WAAlB;;AAQA;;;;;;AAMAC,QAAIO,OAAJ,CAAYQ,UAAZ,GAAyB,UAAUC,cAAV,EAAkCC,UAAlC,EAAsE;AAC7F,YAAMC,QAAQ,KAAKA,KAAnB;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACfA,qBAAaD,cAAb;AACAA,yBAAiBE,MAAMC,UAAvB;AACD;;AAED,YAAMA,aAAapB,YAAYI,GAAZ,CAAgBa,cAAhB,CAAnB;AACA,UAAI,CAACG,UAAL,EAAiB;AACf,aAAKC,MAAL,GAAc,GAAd;AACA,cAAM,IAAIC,KAAJ,CAAW,yBAAwBL,cAAe,EAAlD,CAAN;AACD;;AAED,YAAMM,SAASH,WAAWF,UAAX,CAAf;AACA,UAAI,CAACK,MAAL,CAAW,wBAAX,EAAqC;AACnC,eAAKF,MAAL,GAAc,GAAd;AACA,gBAAM,IAAIC,KAAJ,CAAW,qBAAoBH,MAAMC,UAAW,IAAGD,MAAMI,MAAO,EAAhE,CAAN;AACD;;AAED,UAAI;AACF,eAAOC,QAAQC,OAAR,CAAgBL,WAAWF,UAAX,EAAuBQ,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,CAAhB,CAAP;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAOH,QAAQI,MAAR,CAAeD,GAAf,CAAP;AACD;AACF,KAzBD;;AA2BA,WAAO,UAACE,GAAD,EAAiB;AACtB,UAAIV,QAAQZ,OAAOuB,IAAP,CAAYD,IAAIE,IAAhB,EAAsBF,IAAIlB,QAA1B,CAAZ;;AAEA,UAAI,CAACQ,KAAL,EAAY;AACVU,YAAIR,MAAJ,GAAa,GAAb;AACA,cAAM,IAAIC,KAAJ,CAAW,oBAAmBO,IAAIE,IAAK,EAAvC,CAAN;AACD;;AAEDF,UAAIV,KAAJ,GAAYA,KAAZ;;AAEA,aAAOU,IAAIb,UAAJ,CAAeG,MAAMC,UAArB,EAAiCD,MAAMI,MAAvC,CAAP;AACD,KAXD;AAYD,GAvED;AAwED","file":"index.js","sourcesContent":["import { RouterBuilder, RoutesTranslations } from 'limosa';\n\nexport { RouterBuilder } from 'limosa';\n\ntype AppType = any;\ntype ActionType = (ctx: Object) => void | Promise<void>;\ntype ControllerType = { [string]: ActionType };\ntype ControllersType = Map<string, ControllerType>;\ntype RouterBuilderType = (builder: RouterBuilder) => void;\ntype ReturnType = (app: AppType) => (ctx: Object) => Promise<void>;\ntype RouteTranslationsConfigType = Map<string, Map<string, string>>;\n\nexport default function alpLimosa(\n  routerBuilder: RouterBuilderType,\n  controllers: ControllersType\n): ReturnType {\n  return (app: AppType) => {\n    const config = app.config;\n    const routeTranslationsConfig: RouteTranslationsConfigType = config.get('routeTranslations');\n    const routeTranslations = new RoutesTranslations(routeTranslationsConfig);\n    const builder = new RouterBuilder(routeTranslations, config.get('availableLanguages'));\n    routerBuilder(builder);\n    const router = builder.router;\n\n    app.router = router;\n\n    app.context.urlGenerator = function (...args: Array<string | number>): string {\n      return router.urlGenerator(this.language, ...args);\n    };\n\n    app.context.redirectTo = function (to: string, params: ?{ [string]: string | number }): any {\n      return this.redirect(router.urlGenerator(this.language, to, params));\n    };\n\n    app.controllers = controllers;\n\n    if (!BROWSER) {\n      app.registerBrowserContextTransformer((initialBrowserContext, ctx) => (\n        initialBrowserContext.route = ctx.route\n      ));\n    }\n\n    /**\n     *\n     * @param {string} controllerName\n     * @param {string} [actionName]\n     * @returns {*}\n     */\n    app.context.callAction = function (controllerName: string, actionName: ?string): Promise<void> {\n      const route = this.route;\n\n      if (!actionName) {\n        actionName = controllerName;\n        controllerName = route.controller;\n      }\n\n      const controller = controllers.get(controllerName);\n      if (!controller) {\n        this.status = 404;\n        throw new Error(`Controller not found: ${controllerName}`);\n      }\n\n      const action = controller[actionName];\n      if (!action/* || !action.isAction*/) {\n        this.status = 404;\n        throw new Error(`Action not found: ${route.controller}.${route.action}`);\n      }\n\n      try {\n        return Promise.resolve(controller[actionName].call(null, this));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    };\n\n    return (ctx: Object) => {\n      let route = router.find(ctx.path, ctx.language);\n\n      if (!route) {\n        ctx.status = 404;\n        throw new Error(`Route not found: ${ctx.path}`);\n      }\n\n      ctx.route = route;\n\n      return ctx.callAction(route.controller, route.action);\n    };\n  };\n}\n"]}